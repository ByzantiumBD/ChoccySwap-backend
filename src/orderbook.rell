module;

import ^.utils;
import ^.main;
import ^.pairs;
import lib.ft4.accounts;
import lib.ft4.assets;
import lib.ft4.auth;
import ft_utils: lib.ft4.utils;

val ACC_TYPE_ORDER = "CHOCCY_ORDER";

entity order {
    index pairs.pair;
    index accounts.account;
    index price: big_integer;
    index buy_cusd: boolean;
    /** if (buy_cusd) amount1 else amount_cusd */
    mutable amount: big_integer;
    deadline: timestamp;

    /** only one entry per account and pair at a certain price */
    key account, pair, price;
    key id: byte_array;
}

function get_order_id(accounts.account, pairs.pair, price: big_integer) {
    return (account.id, pair.id, price).hash();
}

function get_order_account_id(pairId: byte_array) {
    return (pairId, ACC_TYPE_ORDER).hash();
}

function add_order(
    accounts.account,
    pair_id: byte_array,
    price: big_integer,
    buy_cusd: boolean,
    amount: big_integer,
    deadline: timestamp,
) {
    require(
        op_context.last_block_time <= deadline,
        "Order already expired. Deadline: <%s>, timestamp: <%s>".format(
            deadline, op_context.last_block_time
        )
    );
    require(amount > 0, "Amount must be greater than 0: " + amount);

    val p = pairs.get_pair(pair_id);
    val curr_price = utils.get_price(p.to_struct());

    val condition = if (buy_cusd) curr_price > price else curr_price < price;

    require(condition, "Spot price is better than the order price. Place a spot order instead.");

    val order_acc = p.order_acc;

    // lock the funds
    assets.Unsafe.transfer(
            account,
            order_acc,
            if (buy_cusd) p.asset1 else main.get_cusd(),
            amount
        );

    create order (
        get_order_id(account, p, price),
        p,
        account,
        price,
        buy_cusd,
        amount,
        deadline
    );
}

function remove_order(order) {
    // unlock the funds
    assets.Unsafe.transfer(
            order.pair.order_acc,
            order.account,
            if (order.buy_cusd) order.pair.asset1 else main.get_cusd(),
            order.amount
        );

    delete order;
}

/*
 * Deletes expired orders in that range.
 * If p1 > p2 (in X/cusd) it's selling cusd
 * If p2 > p1 (in X/cusd) it's buying cusd
 */
function get_orders_in_inclusive_range_ordered(p1: big_integer, p2: big_integer) {
    val buy_cusd = p2 > p1;
    
    var orders = list<struct<order>>();
    if (buy_cusd) {
        orders = order @* {
            .price >= p1,
            .price <= p2,
            .buy_cusd == not buy_cusd
        } ( 
            $.to_struct()
        );
    } else {
        orders = order @* {
            .price <= p1,
            .price >= p2,
            .buy_cusd == not buy_cusd
        } (
            @omit @sort_desc .price,
            $.to_struct()
        );
    }
    val time = ft_utils.latest_time();
    val expired = set<byte_array>(
        orders @* {
            .deadline < time
        } ( .id )
    );

    order @* { .id in expired } (remove_order($));
    return orders @* { .id not in expired };
}

function swap_with_orderbook(
    accounts.account,
    pair: pairs.pair,
    buy_cusd: boolean,
    amount: big_integer,
    amount_min: big_integer,
) {
    var to_pay = amount;
    var spent_on_pair = 0L;
    var received_from_pair = 0L;
    var received_from_orders = 0L;
    var total_maker_fee = 0L;
    val order_acc = pair.order_acc;

    val pair_struct = pair.to_struct();
    var amount_1 = if (buy_cusd) pair_struct.amount1 else pair_struct.amount_cusd;
    var amount_2 = if (buy_cusd) pair_struct.amount_cusd else pair_struct.amount1;

    val curr_price = utils.get_price(pair_struct);
    var partially_filled_order: struct<order>? = null;
    var partially_filled_order_amount_executed = 0L;
    var last_processed = -1;
    
    // Keep track of fully executed orders to delete at the end
    val orders_to_delete = set<byte_array>();

    // retrieve all orders in the price range of the swap with only AMM
    // excessive, but necessary, as it's better to query once, with too many orders returned,
    // than many times, one order per query
    val (
        theoretical_end_price,
        amm_out_amount
    ) = pairs.pair_functions.calc_swap_end_price_and_output(
        pair_struct,
        amount,
        buy_cusd
    );

    var orders = get_orders_in_inclusive_range_ordered(
        curr_price,
        theoretical_end_price,
    );

    val order_last_idx = orders.size() - 1;

    var safety = 0L;
    while (to_pay > 0L) {
        var am_to_next = 0L;
        if (order_last_idx > last_processed) {
            val next_stop = orders[last_processed + 1].price;
            am_to_next = pairs.with_fees.calc_swap_amount_to_price(
                amount_1,
                amount_2,
                next_stop,
            );
        } else {
            am_to_next = to_pay;
        }

        if (am_to_next >= to_pay) {
            val rec = pairs.theoretical.calc_swap_output(
                amount_1,
                amount_2,
                to_pay
            );

            amount_1 += to_pay;
            amount_2 -= rec;

            received_from_pair += rec;
            spent_on_pair += to_pay;

            to_pay = 0;
        } else {
            if (am_to_next != 0) {
                val rec = pairs.theoretical.calc_swap_output(
                    amount_1,
                    amount_2,
                    am_to_next
                );

                amount_1 += am_to_next;
                amount_2 -= rec;

                to_pay -= am_to_next;
                received_from_pair += rec;
                spent_on_pair += am_to_next;
            }

            val order_to_process = orders[++last_processed];
            val (spent, rec, maker_fee, fully_executed) = utils.spend_on_order(
                account,
                order_to_process,
                to_pay
            );

            if (not fully_executed) {
                require(
                    not partially_filled_order??,
                    "More than one order has been left partially executed"
                );

                partially_filled_order = order_to_process;
                partially_filled_order_amount_executed = rec;
            } else {
                orders_to_delete.add(order_to_process.id);
            }

            total_maker_fee += maker_fee;
            to_pay -= spent + maker_fee;
            received_from_orders += rec;
        }

        if (safety == to_pay) {
            if (to_pay < 10L) {
                require(to_pay >= 0L, "Negative to_pay!");
                to_pay = 0L;
            } else {
                require(false, "Loop is stuck");
            }
        }
        safety = to_pay;
    }

    val received_from_pair_remainder = utils.split_amount_for_fee(false, received_from_pair).remainder;
    val (
        received_from_orders_remainder,
        received_from_orders_fee
    ) = utils.split_amount_for_fee(true, received_from_orders);

    if (received_from_orders_remainder + received_from_pair_remainder < amount_min) {
        val asset = if (buy_cusd) main.get_cusd() else pair_struct.asset1;
        require(
            false,
            ("Swap for <%s>. Amount received too small, the price went out of range. "+
            "Expected <%s> but received <%s>").format(
                asset.symbol,
                assets.format_amount_with_decimals(amount_min, asset.decimals),
                assets.format_amount_with_decimals(
                    received_from_orders_remainder + received_from_pair_remainder,
                    asset.decimals
                )
            )
        );
    }

    print("received_from_orders_remainder: ", received_from_orders_remainder);

    // The orders must pay the market taker
    if(received_from_orders_remainder > 0L){
        assets.Unsafe.transfer(
            order_acc,
            account,
            if (buy_cusd) main.get_cusd() else pair_struct.asset1,
            received_from_orders_remainder 
        ); 
    }

    // The taker pays the market maker's fee
    if (total_maker_fee > 0L) {
        assets.Unsafe.transfer(
            account,
            pair_struct.account,
            if (buy_cusd) pair_struct.asset1 else main.get_cusd(),
            total_maker_fee 
        );
    }

    // The taker pays the pair
    if (spent_on_pair > 0L) {
        assets.Unsafe.transfer(
            account,
            pair_struct.account,
            if (buy_cusd) pair_struct.asset1 else main.get_cusd(),
            spent_on_pair 
        );
    }

    // The makers pay the taker's fee
    if (received_from_orders_fee > 0L) {
        assets.Unsafe.transfer(
            order_acc,
            pair_struct.account,
            if (buy_cusd) main.get_cusd() else pair_struct.asset1,
            received_from_orders_fee 
        );
    }

    // The pair sends the amount without fees to the market taker
    if (received_from_pair_remainder > 0L) {
        assets.Unsafe.transfer(
            pair_struct.account,
            account,
            if (buy_cusd) main.get_cusd() else pair_struct.asset1,
            received_from_pair_remainder 
        );
    }

    // Delete all fully executed orders at once
    delete order @* { .id in orders_to_delete };

    if (partially_filled_order??) {
        val o = order @ { .id == partially_filled_order.id };
        o.amount -= partially_filled_order_amount_executed;

        require (o.amount > 0L, "Order was fully executed");
    }

    update main.chain_stats (
        executed_swaps += 1,
        executed_orders += orders_to_delete.size(),
    );
}
