module;

import lib.ft4.accounts;
import lib.ft4.assets;
import lib.ft4.utils;
import ^.orderbook;
import ^.pairs;
import ^.main;
import ^.external;

val transfer_op_name = rell.meta(assets.external.transfer).mount_name;

val ORDER_FEE_PERTHOU = 3L;
val SWAP_FEE_PERTHOU = 3L;

val ASSET_TYPE_LP = "CHOCCY_LP_TOKEN";

function extract_order_info(order: struct<orderbook.order>, rowid) {
    val p = order.pair.to_struct();
    return utils.pagination_result(
        data = (
            id = order.id,
            pair = extract_pair_info(p, rowid(0)).data,
            account_id = order.account.id,
            price = order.price,
            buy_cusd = order.buy_cusd,
            amount = order.amount,
            deadline = order.deadline
        ).to_gtv_pretty(),
        rowid
    );
}

function extract_pair_info(pair: struct<pairs.pair>, rowid) {
    return utils.pagination_result(
        data = (
            id = pair.id,
            name = get_pair_name(pair),
            asset1 = assets.map_asset(pair.asset1),
            amount1 = pair.amount1,
            amount_cusd = pair.amount_cusd,
            lp_token = assets.map_asset(pair.lp_token),
        ).to_gtv_pretty(),
        rowid
    );
}

function get_pair_name(pair: struct<pairs.pair>) {
    return "%s - %s".format(pair.asset1.symbol, main.get_cusd().symbol);
}

function get_price(pair: struct<pairs.pair>) {
    return (pairs.PRICE_PRECISION * pair.amount1) / pair.amount_cusd;
}

/**
 * @param amount    always in the asset that the order maker receives. If buy_cusd, in cusd
 */
function spend_on_order(
    accounts.account,
    order_struct: struct<orderbook.order>,
    amount: big_integer
): (spent:big_integer, received:big_integer, maker_fee:big_integer, fully_executed:boolean) {
    require(amount > 0, "Amount must be greater than 0: " + amount);
    val asset1 = order_struct.pair.asset1;

    val order_worth = if (order_struct.buy_cusd) 
        order_struct.amount * pairs.PRICE_PRECISION /  order_struct.price
        else
        order_struct.amount * order_struct.price / pairs.PRICE_PRECISION;

    val input = min(amount, order_worth);
    var output = if (order_struct.buy_cusd)
        input * order_struct.price / pairs.PRICE_PRECISION
        else
        input * pairs.PRICE_PRECISION /  order_struct.price;
    if (input == order_worth) {
        output = order_struct.amount;
    }

    require(output >= 0, "Output must be non-negative: " + output);
    val (maker_amount, maker_fee) = split_amount_for_fee(true, input);

    if (maker_amount > 0) {
        assets.Unsafe.transfer(
            account,
            order_struct.account,
            if (order_struct.buy_cusd) main.get_cusd() else asset1,
            maker_amount
        );
    }


    val fully_executed = output == order_struct.amount;
    val fully_spent = input == amount;
    if (not fully_executed) {
        require(fully_spent, "Order not fully executed, but the user had more funds to spend");
    }
    
    return (spent = maker_amount, received = output, maker_fee = maker_fee, fully_executed = fully_executed);
}

function split_amount_for_fee(is_order: boolean, amount: big_integer) {
    val fee_perthou = if (is_order) ORDER_FEE_PERTHOU else SWAP_FEE_PERTHOU;

    val fee_amount = amount * fee_perthou / 1000L;
    return (remainder = amount - fee_amount, fee = fee_amount);
}

function register_asset_with_uniqueness(
    name,
    symbol: text,
    decimals: integer,
    icon_url: text,
    uniqueness_resolver: byte_array,
    type: text = ASSET_TYPE_LP
): assets.asset {
    assets.validate_asset_decimals(decimals);
    assets.validate_asset_name(name);
    assets.validate_asset_symbol(symbol);
    assets.validate_asset_type(type);

    val id = (name, chain_context.blockchain_rid).hash();
    return create assets.asset (
        id,
        name,
        symbol,
        decimals,
        uniqueness_resolver,
        issuing_blockchain_rid = chain_context.blockchain_rid,
        icon_url = assets.parse_icon_url(icon_url),
        type,
        total_supply = 0L
    );
}

function register_lp(
    assets.asset
) {
    return register_asset_with_uniqueness(
        "%s LP token".format(asset.symbol),
        "LP",
        18,
        "https://choccyswap.com/logo_lp.svg",
        "LP provider for asset ID %s on choccyswap".format(asset.id).to_bytes()
    );
}
function ensure_order_account(pair_id : byte_array) {
    return accounts.ensure_account_without_auth(
        orderbook.get_order_account_id(pair_id),
        orderbook.ACC_TYPE_ORDER
    );
}