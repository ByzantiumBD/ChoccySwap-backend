@test module;

import ^^.main;
import ^^.utils;
import ft_utils: lib.ft4.utils;
import lib.ft4.assets;
import tu: ^.test_utils;
import ext: ^^.external;

function test_swap() {
    val alice = tu.get_account(rell.test.keypairs.alice.pub);
    val p = tu.create_pool(
        10000L, 10000L
    );

    tu.give_balance(alice, p.asset1, 10000L);

    val expected_amount_out = utils.split_amount_for_fee(false, 5000L).remainder;

    assert_equals(expected_amount_out, 5000L*997L/1000L);

    // can't swap 10k for > expected
    tu.expect_failure(
        ext.swap(
            p.id, true, 10000, expected_amount_out+1, ft_utils.latest_time() + 1000000
        ),
        rell.test.keypairs.alice,
        "Amount received too small, the price went out of range"
    );

    // can swap 10k for expected
    tu.run(
        ext.swap(
            p.id, true, 10000, expected_amount_out, ft_utils.latest_time() + 1000000
        ),
        rell.test.keypairs.alice
    );

    // alice has no "asset1"
    assert_false(
        assets.balance @? {
            .account == alice,
            .asset.id == p.id
        }??
    );
    // alice has "expected" ccy
    assert_equals(
        assets.balance @ {
            .account == alice,
            .asset == main.ccy.asset
        } .amount,
        expected_amount_out
    );

    tu.give_balance(alice, main.ccy.asset, 10000L);
    val expected_2 = utils.split_amount_for_fee(false, (p.amount1 / 2L)).remainder;

    tu.expect_failure(
        ext.swap(
            p.id, false, p.amount_ccy, expected_2 + 1, ft_utils.latest_time() + 1000000
        ),
        rell.test.keypairs.alice,
        "Amount received too small, the price went out of range"
    );
    tu.run(
        ext.swap(
            p.id, false, p.amount_ccy, expected_2, ft_utils.latest_time() + 1000000
        ),
        rell.test.keypairs.alice
    );

    assert_equals(
        assets.balance @ {
            .account == alice,
            .asset.id == p.id
        } .amount,
        expected_2
    );
}

function test_double_swap() {
    val alice = tu.get_account(rell.test.keypairs.alice.pub);
    val p1 = tu.create_pool(
        10000L, 10000L
    );
    val p2 = tu.create_pool(
        10000L, 10000L, "euro"
    );

    tu.give_balance(alice, p1.asset1, 1000L);

    val expected_amount_out_1_no_fee = (10000L - (10000L*10000L)/11000);
    val expected_amount_out_1_fee = expected_amount_out_1_no_fee - (expected_amount_out_1_no_fee*3L/1000L);
    val expected_amount_out_2_no_fee = (10000L - (10000L*10000L)/(10000 + expected_amount_out_1_fee));
    val expected_amount_out_2_fee = expected_amount_out_2_no_fee - (expected_amount_out_2_no_fee*3L/1000L);

    assert_equals(expected_amount_out_2_fee, 831L);

    // can swap 10k for expected
    tu.run(
        ext.double_swap(
            p1.id, p2.id, 1000, expected_amount_out_2_fee, ft_utils.latest_time() + 1000000
        ),
        rell.test.keypairs.alice
    );

    // alice has no "asset1"
    assert_false(
        assets.balance @? {
            .account == alice,
            .asset.id == p1.id
        }??
    );
    // alice has no ccy
    assert_false(
        assets.balance @? {
            .account == alice,
            .asset == main.ccy.asset
        }??
    );
    // alice has expected "asset2"
    assert_equals(
        assets.balance @ {
            .account == alice,
            .asset.id == p2.id
        } .amount,
        expected_amount_out_2_fee
    );
}