module;
import ^^.utils;
import ^^.orderbook;
import ^^.pairs;
import lib.ft4.assets;
import lib.ft4.accounts;
import lib.ft4.auth;

operation create_acc_test(accounts.auth_descriptor) {
    accounts.create_account_with_auth(auth_descriptor);
}
operation limit_mint_test(acc_id: byte_array, timestamp) {
    utils.limit_mints(accounts.account @ {acc_id}, timestamp);
}
operation register_asset_test(name, decimals: integer) {
    assets.Unsafe.register_asset(
        name,
        name,
        decimals,
        chain_context.blockchain_rid,
        "http://"+name
    );
}
operation mint_test(account_id: byte_array, asset_id: byte_array, amount: big_integer) {
    assets.Unsafe.mint(
        accounts.account @ {account_id},
        assets.asset @ {.id == asset_id},
        amount
    );
}
function empty_auth_message(gtv) = "";
@extend(auth.auth_handler)
function () = auth.add_auth_handler(
    scope = rell.meta(empty_auth).mount_name,
    flags = ["T"],
    message = empty_auth_message(*)
);
operation empty_auth() {
    auth.authenticate();
}
operation performance_test(account_id: byte_array, pair_id: byte_array, price: big_integer) {
    val trudy = accounts.account @ { account_id };
    val p = pairs.pair @ { pair_id };
    val order_acc = accounts.ensure_account_without_auth(
        x"aa",
        "AA"
    );
    assets.Unsafe.mint(
        order_acc,
        p.asset1,
        10000L
    );
    val deadline = op_context.last_block_time + (1000*3600*24);

    for (i in range(10000)) {
        create orderbook.order (
            x"aa".repeat(i),
            p,
            account = trudy,
            order_acc,
            price = price - big_integer(i),
            true,
            amount = 1L,
            deadline
        );
    }
}